###############################################################################
# Ascent CI Checks
###############################################################################
# Ref:
# https://aka.ms/yaml

#####
# TO USE A NEW CONTAINER, UPDATE TAG NAME HERE AS PART OF YOUR PR!
#####
variables:

  ubuntu_18_tag : alpinedav/ascent-ci:ubuntu-18-devel-tpls_2021-07-19-shaebe45c
  ubuntu_18_cuda_tag : alpinedav/ascent-ci:ubuntu-18-cuda-10.1-devel-tpls_2021-05-19-sha1ca78d
  ubuntu_20_10_tag: alpinedav/ascent-ci:ubuntu-20.10-devel-tpls_2021-07-19-sha6688f8
  ubuntu_21_04_tag: alpinedav/ascent-ci:ubuntu-21.04-devel-tpls_2021-07-27-sha9dae53


# only build merge target pr to develop
trigger: none
pr:
  branches:
    include:
    - develop

# fast fail sanity checks
stages:
- stage: Sanity
  jobs:
  - job: BLT_Time_Travel_Check
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
          #######################################
          # run our sanity check script
          #######################################
          git fetch
          python scripts/ci/check_blt_time_travel.py
        displayName: 'BLT Time Travel Check'

# main checks build using docker containers that
# include tpls built with uber
- stage: Main
  jobs:
  - job: Main_Ubuntu
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    variables:
      COMPILER_CC: gcc
      COMPILER_CXX: g++
      COMPILER_FC: gfortran
    strategy:
      matrix:
        ubuntu_18_minimal:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: OFF
          ENABLE_VTKH: OFF
          ENABLE_MFEM: OFF
          ENABLE_BABELFLOW: OFF
          ENABLE_ADIOS2: OFF
          ENABLE_FIDES: OFF
          ENABLE_OCCA: OFF
          ENABLE_UMPIRE: OFF
          BLT_CXX_STD: c++11
        ubuntu_18_shared_py36_cxx11:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: ON
          ENABLE_VTKH: ON
          ENABLE_MFEM: ON
          ENABLE_BABELFLOW: OFF
          ENABLE_ADIOS2: OFF
          ENABLE_FIDES: OFF
          ENABLE_OCCA: OFF
          ENABLE_UMPIRE: OFF
          BLT_CXX_STD: c++11
        ubuntu_18_shared_py36_cxx11_occa:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: ON
          ENABLE_VTKH: ON
          ENABLE_MFEM: ON
          ENABLE_BABELFLOW: ON
          ENABLE_ADIOS2: OFF
          ENABLE_FIDES: OFF
          ENABLE_OCCA: ON
          ENABLE_UMPIRE: ON
          BLT_CXX_STD: c++11
        ubuntu_18_shared_py36_cxx11_bflow:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: ON
          ENABLE_VTKH: ON
          ENABLE_MFEM: ON
          ENABLE_BABELFLOW: ON
          ENABLE_ADIOS2: OFF
          ENABLE_FIDES: OFF
          ENABLE_OCCA: OFF
          ENABLE_UMPIRE: OFF
          BLT_CXX_STD: c++11
        ubuntu_18_shared_py36_cxx11_fides:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: ON
          ENABLE_VTKH: ON
          ENABLE_MFEM: ON
          ENABLE_BABELFLOW: OFF
          ENABLE_ADIOS2: ON
          ENABLE_FIDES: ON
          ENABLE_OCCA: OFF
          ENABLE_UMPIRE: OFF
          BLT_CXX_STD: c++11
        ubuntu_18_shared_py36_cxx14:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: ON
          ENABLE_VTKH: ON
          ENABLE_MFEM: ON
          ENABLE_BABELFLOW: OFF
          ENABLE_ADIOS2: OFF
          ENABLE_FIDES: OFF
          ENABLE_OCCA: OFF
          ENABLE_UMPIRE: OFF
          BLT_CXX_STD: c++14
        ubuntu_20_10_shared_py36_cxx11:
          containerImage: ${{ variables.ubuntu_20_10_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: ON
          ENABLE_VTKH: ON
          ENABLE_MFEM: ON
          ENABLE_BABELFLOW: OFF
          ENABLE_ADIOS2: OFF
          ENABLE_FIDES: OFF
          ENABLE_OCCA: OFF
          ENABLE_UMPIRE: OFF
          BLT_CXX_STD: c++11
        ubuntu_21_04_shared_py36_cxx11:
          containerImage: ${{ variables.ubuntu_21_04_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          ENABLE_PYTHON: ON
          ENABLE_VTKH: ON
          ENABLE_MFEM: ON
          ENABLE_BABELFLOW: OFF
          ENABLE_ADIOS2: OFF
          ENABLE_FIDES: OFF
          BLT_CXX_STD: c++11
    container: $[ variables['containerImage'] ]

    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           #################################
           # configure
           #################################
           # setup compiler env vars
           export CC=${COMPILER_CC}
           export CXX=${COMPILER_CXX}
           export FC=${COMPILER_FC}
           ${CC} --version
           # capture current path
           export ROOT_DIR=`pwd`
           # find spack generated host config file
           export HOST_CONFIG=`ls /uberenv_libs/*.cmake`
           echo $HOST_CONFIG
           # find spack installed cmake
           export CMAKE_BIN_DIR=`ls -d /uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           echo $PATH
           which cmake
           cmake --version
           # prepare build dir
           mkdir build
           cd build
           # setup cmake options
           export CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install"
           # c++ std
           export CMAKE_OPTS="${CMAKE_OPTS} -DBLT_CXX_STD=${BLT_CXX_STD}"
           # include host config
           export CMAKE_OPTS="${CMAKE_OPTS} -C ${HOST_CONFIG}"
           # extra settings
           export CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_PYTHON=${ENABLE_PYTHON} "
           if [ $ENABLE_MFEM  = 'OFF' ];  then export CMAKE_OPTS="${CMAKE_OPTS} -DMFEM_DIR=IGNORE"; fi
           if [ $ENABLE_MFEM  = 'OFF' ];  then export CMAKE_OPTS="${CMAKE_OPTS} -DDRAY_DIR=IGNORE"; fi
           if [ $ENABLE_VTKH  = 'OFF' ];  then export CMAKE_OPTS="${CMAKE_OPTS} -DVTKH_DIR=IGNORE"; fi
           if [ $ENABLE_VTKH  = 'OFF' ];  then export CMAKE_OPTS="${CMAKE_OPTS} -DVTKM_DIR=IGNORE"; fi
           if [ $ENABLE_ADIOS2 = 'OFF' ]; then export CMAKE_OPTS="${CMAKE_OPTS} -DADIOS2_DIR=IGNORE"; fi
           if [ $ENABLE_FIDES = 'OFF' ];  then export CMAKE_OPTS="${CMAKE_OPTS} -DFIDES_DIR=IGNORE"; fi
           if [ $ENABLE_OCCA = 'OFF' ];   then export CMAKE_OPTS="${CMAKE_OPTS} -DOCCA_DIR=IGNORE"; fi
           if [ $ENABLE_UMPIRE = 'OFF' ]; then export CMAKE_OPTS="${CMAKE_OPTS} -DUMPIRE_DIR=IGNORE"; fi
           export CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_BABELFLOW=$ENABLE_BABELFLOW"
           echo ${CMAKE_OPTS}
           # configure
           cmake ${CMAKE_OPTS} ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make VERBOSE=1
        displayName: 'Build'

      - script: |
           #################################
           # test
           #################################
           # find spack installed cmake
           export ROOT_DIR=`pwd`
           export CMAKE_BIN_DIR=`ls -d /uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           which ctest
           cd build
           # run ctest
           ctest -T test --output-on-failure -V
        displayName: 'Run Unit Tests'

      - script: |
           #################################
           # gen img diff report
           #################################
           # run cmake target to gen report
           cd build
           make gen_report
        displayName: 'Run Gen Test Image Diff Report'
        condition: eq(variables['ENABLE_VTKH'], 'ON')

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'cTest'
          testResultsFiles: '**/Test.xml'
        displayName: 'Unit Test Results'
        condition: always()

      - task: CopyFiles@2
        inputs:
          contents: 'build/tests/_output/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
        condition: always()

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: $(Build.DefinitionName)_$(Agent.JobName)
        condition: always()

      - script: |
           #################################
           # install
           #################################
           cd build
           make install
        displayName: 'Install'

      - script: |
          ###########################
          # using with cmake example
          ###########################
          pwd
          ls -l
          # find spack installed cmake
          export ROOT_DIR=`pwd`
          export CMAKE_BIN_DIR=`ls -d /uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
          export PATH=${CMAKE_BIN_DIR}:$PATH
          echo $PATH
          which cmake
          cd install/examples/ascent/using-with-cmake
          mkdir _test_build
          cd _test_build
          cmake ../
          make VERBOSE=1
          ./ascent_render_example
        displayName: 'Test vs Install (using-with-cmake)'
        condition: eq(variables['ENABLE_VTKH'], 'ON')

      - script: |
          ###########################
          # using with make example
          ###########################
          cat install/share/ascent/ascent_config.mk
          pwd
          ls -l
          cd install/examples/ascent/using-with-make
          make
          ./ascent_render_example
        displayName: 'Test vs Install (using-with-make)'
        condition: eq(variables['ENABLE_VTKH'], 'ON')

  - job: Main_Ubuntu_18_Cuda_10_1
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    container: ${{ variables.ubuntu_18_cuda_tag }}
    variables:
      COMPILER_CC: gcc
      COMPILER_CXX: g++
      COMPILER_FC: gfortran
    strategy:
      matrix:
        static:
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Release
          ENABLE_BABELFLOW: OFF
          # static linking unit tests eats up alot of disk space,
          # so skip building tests in CI to keep us away from clif
          ENABLE_TESTS: OFF
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           #################################
           # configure
           #################################
           # setup compiler env vars
           export CC=${COMPILER_CC}
           export CXX=${COMPILER_CXX}
           export FC=${COMPILER_FC}
           ${CC} --version
           # capture current path
           export ROOT_DIR=`pwd`
           # find spack generated host config file
           export HOST_CONFIG=`ls /uberenv_libs/*.cmake`
           echo $HOST_CONFIG
           # find spack installed cmake
           export CMAKE_BIN_DIR=`ls -d /uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           echo $PATH
           which cmake
           cmake --version
           # prepare build dir
           mkdir build
           cd build
           # setup cmake options
           export CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_TESTS=$ENABLE_TESTS"
           export CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_BABELFLOW=$ENABLE_BABELFLOW"
           export CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install"
           # configure
           cmake ${CMAKE_OPTS} -C ${HOST_CONFIG} ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make VERBOSE=1
        displayName: 'Build'


      - script: |
           #################################
           # install
           #################################
           cd build
           make install
        displayName: 'Install'

      - script: |
          ###########################
          # using with cmake example
          ###########################
          pwd
          ls -l
          # find spack installed cmake
          export ROOT_DIR=`pwd`
          export CMAKE_BIN_DIR=`ls -d /uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
          export PATH=${CMAKE_BIN_DIR}:$PATH
          echo $PATH
          which cmake
          cd install/examples/ascent/using-with-cmake
          mkdir _test_build
          cd _test_build
          cmake ../
          make VERBOSE=1
        displayName: 'Test vs Install (using-with-cmake) [build only]'

      - script: |
          ###########################
          # using with make example
          ###########################
          cat install/share/ascent/ascent_config.mk
          pwd
          ls -l
          cd install/examples/ascent/using-with-make
          make
        displayName: 'Test vs Install (using-with-make) [build only]'

