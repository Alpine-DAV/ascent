###############################################################################
# Copyright (c) Lawrence Livermore National Security, LLC and other Ascent
# Project developers. See top-level LICENSE AND COPYRIGHT files for dates and
# other details. No copyright assignment is required to contribute to Ascent.
###############################################################################

# Same Python interpreter for all time steps
# We use count for one time initializations
try:
    count = count + 1
except NameError:
    count = 0

if count == 0:
    # Initialize ParaView
    import paraview
    paraview.options.batch = True
    paraview.options.symmetric = True
    from paraview.simple import LoadPlugin, Show, ColorBy, SelectCells, \
        GetColorTransferFunction, GetActiveView, GetScalarBar, ResetCamera,\
        Render, SaveScreenshot, ExtractSelection, GetActiveCamera,\
        GetProperty, CreateRenderView

    # load AscentSource to present simulation data as a VTK dataset
    LoadPlugin("@PARAVIEW_ASCENT_SOURCE@", remote=True, ns=globals())
    ascentSource = AscentSource()
    view = CreateRenderView()
    view.ViewSize = [1024, 1024]

    # show non-ghost cells colored by "energy"
    sel = SelectCells("vtkGhostType < 1")
    e = ExtractSelection(Selection=sel)
    rep = Show()
    ColorBy(rep, ("CELLS", "energy"))
    # rescale transfer function and show color bar
    transferFunction = GetColorTransferFunction('energy')
    transferFunction.RescaleTransferFunction(1, 5.5)
    renderView1 = GetActiveView()
    scalarBar = GetScalarBar(transferFunction, renderView1)
    scalarBar.Title = 'energy'
    scalarBar.ComponentTitle = ''
    scalarBar.Visibility = 1
    rep.SetScalarBarVisibility(renderView1, True)
    cam = GetActiveCamera()
    cam.Elevation(30)
    cam.Azimuth(-30)

ascentSource.UpdateAscentData()
ascentSource.UpdatePropertyInformation()
cycle = GetProperty(ascentSource, "Cycle").GetElement(0)
rank = GetProperty(ascentSource, "Rank").GetElement(0)
if (rank == 0):
    print(
        "=======================================Called: {} {} {}".format(
            GetProperty(ascentSource, "TimeStep"),
            GetProperty(ascentSource, "Cycle"),
            GetProperty(ascentSource, "Time")))
imageName = "image_{0:04d}.png".format(int(cycle))
ResetCamera()
Render()
SaveScreenshot(imageName, ImageResolution=(1024, 1024))
# dataName = "cloverleaf3d_data_{0:04d}".format(int(cycle))
# writer = CreateWriter(dataName + ".pvtr", ascentSource)
# writer.UpdatePipeline()


# # VTK API
# from paraview_ascent_source import AscentSource, write_vtk
# ascentSource = AscentSource()
# ascentSource.Update()
# write_vtk("vtkdata", ascentSource.GetNode(),
#           ascentSource.GetOutputDataObject(0))


# # Python API
# from paraview_ascent_source import ascent_to_vtk, write_vtk, write_json,
#      write_hdf
# node = ascent_data().child(0)
# write_json("blueprint", node)
# write_hdf("data", node)
# data = ascent_to_vtk(node)
# write_vtk("pythondata", node, data)
