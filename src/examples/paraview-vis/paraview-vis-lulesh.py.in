###############################################################################
# Copyright (c) Lawrence Livermore National Security, LLC and other Ascent
# Project developers. See top-level LICENSE AND COPYRIGHT files for dates and
# other details. No copyright assignment is required to contribute to Ascent.
###############################################################################

# Same Python interpreter for all time steps
# We use count for one time initializations
try:
    count = count + 1
except NameError:
    count = 0

if count == 0:
    # ParaView API
    # WARNING: this does not work inside the plugin
    #          unless you have the same import in paraview-vis.py
    import paraview
    paraview.options.batch = True
    paraview.options.symmetric = True
    from paraview.simple import LoadPlugin, Show, ColorBy, \
        GetColorTransferFunction, GetActiveView, GetScalarBar, ResetCamera,\
        Render, SaveScreenshot, GetActiveCamera, GetProperty, CreateRenderView

    LoadPlugin("@PARAVIEW_ASCENT_SOURCE@", remote=True, ns=globals())
    ascentSource = AscentSource()
    view = CreateRenderView()
    view.ViewSize = [1024, 1024]

    rep = Show()
    ColorBy(rep, ("CELLS", "e"))
    # rescale transfer function
    energyLUT = GetColorTransferFunction('e')
    energyLUT.RescaleTransferFunction(1, 5.5)
    # show color bar
    renderView1 = GetActiveView()
    energyLUT = GetScalarBar(energyLUT, renderView1)
    energyLUT.Title = 'e'
    energyLUT.ComponentTitle = ''
    # set color bar visibility
    energyLUT.Visibility = 1
    # show color legend
    rep.SetScalarBarVisibility(renderView1, True)

    cam = GetActiveCamera()
    cam.Elevation(-30)
    cam.Azimuth(-120)


ascentSource.UpdateAscentData()
ascentSource.UpdatePropertyInformation()
cycle = GetProperty(ascentSource, "Cycle").GetElement(0)
rank = GetProperty(ascentSource, "Rank").GetElement(0)
imageName = "image_{0:04d}.png".format(int(cycle))
ResetCamera()
Render()
SaveScreenshot(imageName, ImageResolution=(1024, 1024))

# This does not work correctly if
# topologies/topo/elements/origin/{i0,j0,k0} (optional, default = {0,0,0})
# is missing
# dataName = "lulesh_data_{0:04d}".format(int(cycle))
# writer = CreateWriter(dataName + ".pvts", ascentSource)
# writer.UpdatePipeline()


# # VTK API
# from ascent_to_vtk import AscentSource, write_vtk
# ascentSource = AscentSource()
# ascentSource.Update()
# write_vtk("vtkdata", ascentSource.GetNode(),
#           ascentSource.GetOutputDataObject(0))


# # Python API
# from ascent_to_vtk import ascent_to_vtk, write_vtk, write_json
# node = ascent_data().child(0)
# write_json("blueprint", node)
# data = ascent_to_vtk(node)
# write_vtk("pythondata", node, data)
