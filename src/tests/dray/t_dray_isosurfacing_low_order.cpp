#include "gtest/gtest.h"

#include <dray/data_model/collection.hpp>
#include <dray/filters/isosurfacing.hpp>
#include <dray/filters/marching_cubes.hpp>

const int EXAMPLE_MESH_SIDE_DIM = 15;
const int EXAMPLE_MESH_SIDE_DIM_SM = 7;

// There are a couple macros used by dray_test_utils
//#define DEBUG_TEST
//#define GENERATE_BASELINES
const std::string DRAY_TEST_NAME("isosurfacing_low_order");
#include "dray_test_utils.hpp"

// Writes the inputs and outputs of each test to the current working directory.
// Useful for debugging with visit
//#define WRITE_CONDUIT_DATASETS

//-----------------------------------------------------------------------------
static void
isosurface_3d(const conduit::Node &dset, const std::string name,
  const std::string fieldname = std::string("test"),
  const float value = 0.5)
{
  // Convert from blueprint to dray
  dray::Collection collection;
  dray::DataSet domain = dray::BlueprintReader::blueprint_to_dray(dset);
  collection.add_domain(domain);

#ifdef WRITE_CONDUIT_DATASETS
  {
    conduit::Node n_input;
    dray_collection_to_blueprint(collection, n_input);
    dray::BlueprintReader::save_blueprint(std::string("iso_") + name + "_orig", n_input);
  }
#endif

  // Filter
  dray::MarchingCubes iso;
  iso.set_field(fieldname);
  iso.set_isovalue(value);
  dray::Collection output = iso.execute(collection);

#ifdef WRITE_CONDUIT_DATASETS
  {
    conduit::Node n_output;
    dray_collection_to_blueprint(output, n_output);
    dray::BlueprintReader::save_blueprint(std::string("iso_") + name, n_output);
  }
#endif

  handle_test(std::string("iso_") + name, output);

  // NOTE: Make sure that baselines are generated by the MarchingCubes filter.
#ifndef GENERATE_BASELINES
  // Should also get the same result from the ExtractIsosurface filter
  dray::ExtractIsosurface isosurface;
  isosurface.iso_field(fieldname);
  isosurface.iso_value(value);
  // Marching cubes only makes tris
  output = isosurface.execute(collection).first;
  handle_test(std::string("iso_") + name, output);
#endif
}

//-----------------------------------------------------------------------------
TEST (t_dray_isosurfacing_low_order, hexs_3_3_3)
{
  const int nx = 3, ny = 3, nz = 3;
  conduit::Node data;
  conduit::blueprint::mesh::examples::braid("structured",
                                             nx,
                                             ny,
                                             nz,
                                             data);
  /*
  .25   .75  .25
    *----*----*
    |    |    |
    |    |    |
.75 *----*----* .75
    |    |    |
    |    |    |
    *----*----*
   .25  .75  .25

   */
  double values[] = {
    .25, .75,  .25,
    .75, .25,  .75,
    .25, .75,  .25,

    .25, .75,  .25,
    .75, .25,  .75,
    .25, .75,  .25,

    .25, .75,  .25,
    .75, .25,  .75,
    .25, .75,  .25,
  };

  // Add another field.
  data["fields/test/topology"] = "mesh";
  data["fields/test/association"] = "vertex";
  data["fields/test/type"] = "scalar";
  data["fields/test/values"].set_external(values, nx*ny*nz);

  // Add another vector field.
  const int constant = 12;
  const int nc = 3;
  data["fields/vec"] = make_simple_field(constant, nx, ny, nz, nc);

  isosurface_3d(data, "hexs_3_3_3");
}

//-----------------------------------------------------------------------------
TEST (t_dray_isosurfacing_low_order, hexs_3_3_3_flipped)
{
  const int nx = 3, ny = 3, nz = 3;
  conduit::Node data;
  conduit::blueprint::mesh::examples::braid("structured",
                                             nx,
                                             ny,
                                             nz,
                                             data);
  /* Same as above I just flipped the pattern */
  double values[] = {
    .75, .25,  .75,
    .25, .75,  .25,
    .75, .25,  .75,

    .75, .25,  .75,
    .25, .75,  .25,
    .75, .25,  .75,

    .75, .25,  .75,
    .25, .75,  .25,
    .75, .25,  .75,
  };

  // Add another field.
  data["fields/test/topology"] = "mesh";
  data["fields/test/association"] = "vertex";
  data["fields/test/type"] = "scalar";
  data["fields/test/values"].set_external(values, nx*ny*nz);

  // Add another vector field.
  const int constant = 12;
  const int nc = 3;
  data["fields/vec"] = make_simple_field(constant, nx, ny, nz, nc);

  isosurface_3d(data, "hexs_3_3_3_flipped");
}

//-----------------------------------------------------------------------------
TEST (t_dray_isosurfacing_low_order, hexs_braid)
{
  conduit::Node data;
  conduit::blueprint::mesh::examples::braid("structured",
                                             EXAMPLE_MESH_SIDE_DIM,
                                             EXAMPLE_MESH_SIDE_DIM,
                                             EXAMPLE_MESH_SIDE_DIM,
                                             data);

  isosurface_3d(data, "hexs_braid", "braid");
}

//-----------------------------------------------------------------------------
TEST (t_dray_isosurfacing_low_order, tets_braid)
{
  conduit::Node data;
  conduit::blueprint::mesh::examples::braid("tets",
                                             EXAMPLE_MESH_SIDE_DIM,
                                             EXAMPLE_MESH_SIDE_DIM,
                                             EXAMPLE_MESH_SIDE_DIM,
                                             data);

  isosurface_3d(data, "tets_braid", "braid");
}
