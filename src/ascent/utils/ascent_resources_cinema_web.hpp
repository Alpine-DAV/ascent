//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2015-2021, Lawrence Livermore National Security, LLC.
//
// Produced at the Lawrence Livermore National Laboratory
//
// LLNL-CODE-716457
//
// All rights reserved.
//
// This file is part of Ascent.
//
// For details, see: http://ascent.readthedocs.io/.
//
// Please also read ascent/LICENSE
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the disclaimer below.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the disclaimer (as noted below) in the
//   documentation and/or other materials provided with the distribution.
//
// * Neither the name of the LLNS/LLNL nor the names of its contributors may
//   be used to endorse or promote products derived from this software without
//   specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,
// LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// ----- 
// NOTE: THIS FILE IS AUTO GENERATED 
// ----- 
std::string RC_CINEMA_WEB =  R"xyzxyz(

{
  "schema": 
  {
    "index.html": {"dtype":"char8_str","number_of_elements": 2033,"offset": 0,"stride": 1,"element_bytes": 1,"endianness": "little"},
    "cvlib": 
    {
      "license.md": {"dtype":"char8_str","number_of_elements": 1658,"offset": 2033,"stride": 1,"element_bytes": 1,"endianness": "little"},
      "ASCENT_README.md": {"dtype":"char8_str","number_of_elements": 786,"offset": 3691,"stride": 1,"element_bytes": 1,"endianness": "little"},
      "README.md": {"dtype":"char8_str","number_of_elements": 3685,"offset": 4477,"stride": 1,"element_bytes": 1,"endianness": "little"},
      "copyright.md": {"dtype":"char8_str","number_of_elements": 1174,"offset": 8162,"stride": 1,"element_bytes": 1,"endianness": "little"},
      "css": 
      {
        "cvlib.css": {"dtype":"char8_str","number_of_elements": 3680,"offset": 9336,"stride": 1,"element_bytes": 1,"endianness": "little"}
      },
      "js": 
      {
        "Database.js": {"dtype":"char8_str","number_of_elements": 901,"offset": 13016,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "ControlsPhiTheta.js": {"dtype":"char8_str","number_of_elements": 5235,"offset": 13917,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "Renderer.js": {"dtype":"char8_str","number_of_elements": 598,"offset": 19152,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "UIFactory.js": {"dtype":"char8_str","number_of_elements": 33470,"offset": 19750,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "DatabaseSpecA.js": {"dtype":"char8_str","number_of_elements": 13013,"offset": 53220,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "ControlsBasic.js": {"dtype":"char8_str","number_of_elements": 2707,"offset": 66233,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "DatabaseSpecA_NoAJAX.js": {"dtype":"char8_str","number_of_elements": 13138,"offset": 68940,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "Parameter.js": {"dtype":"char8_str","number_of_elements": 1500,"offset": 82078,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "ResultSet.js": {"dtype":"char8_str","number_of_elements": 671,"offset": 83578,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "RendererSpecA.js": {"dtype":"char8_str","number_of_elements": 2080,"offset": 84249,"stride": 1,"element_bytes": 1,"endianness": "little"},
        "QuerySet.js": {"dtype":"char8_str","number_of_elements": 1880,"offset": 86329,"stride": 1,"element_bytes": 1,"endianness": "little"}
      },
      "lib": 
      {
        "jquery-3.1.1.min.js": {"dtype":"char8_str","number_of_elements": 86710,"offset": 88209,"stride": 1,"element_bytes": 1,"endianness": "little"}
      }
    }
  },
  "data": 
  {
    "base64": ""
  }
}
)xyzxyz";
// ----- 
